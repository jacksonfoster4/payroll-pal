{"ast":null,"code":"import Cookies from 'js-cookie';\nconst apiUrl = 'localhost:5000'; // const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nclass PayrollPalClient {\n  static login(...args) {\n    let username = args[0].username;\n    let password = args[0].password;\n    let body = {\n      'username': username,\n      'password': password\n    };\n    let demo = args[0].demo;\n\n    if (demo) {\n      ajax.post({\n        'url': \"\".concat(apiUrl, \"/demo\"),\n        'body': {\n          'demo': demo\n        }\n      });\n    } else {\n      fetch(\"\".concat(apiUrl, \"/auth\"), {\n        credentials: 'include',\n        method: 'POST',\n        body: body\n      }).then(res => res.json()).then(result => {\n        console.log(result);\n      }, error => {\n        console.log(error);\n      });\n    }\n\n    console.log(username);\n    console.log(password);\n    console.log(demo);\n\n    if (demo) {\n      Cookies.set('demo', demo);\n    }\n\n    PayrollPalClient.setAuthToken(\"AUTH-TOKEN-XXXXX123456XX\"); // if authenticated\n\n    return true; // else\n    // return false\n  }\n\n  static getEntries(start, end) {\n    /* \n    let token = Cookies.get('authToken')\n    ajax.post({\n        'url': `${apiUrl}/get-entries`,\n        'body': {\n            'token': token,\n            'start': start,\n            'end': end\n        }\n    }) */\n    return {\n      'totalHours': 25.5,\n      'payRate': 18.00,\n      'payPeriodStart': [10, 21, 2019],\n      'payPeriodEnd': [10, 27, 2019],\n      'firstName': 'Jackson',\n      'entries': [{\n        'date': [10, 21, 2019],\n        'day': 'Monday',\n        'hours': 8,\n        'approved': true,\n        'punches': [['work', '9:00 AM', '2:30 PM'], ['meal', '2:30 PM', '3:00 PM'], ['meal', '3:00 PM', '5:30 PM']]\n      }, {\n        'date': [10, 22, 2019],\n        'day': 'Tuesday',\n        'hours': 8,\n        'approved': false,\n        'punches': [['work', '9:00 AM', '2:30 PM'], ['meal', '2:30 PM', '3:00 PM'], ['meal', '3:00 PM', '5:30 PM']]\n      }, {\n        'date': [10, 23, 2019],\n        'day': 'Wednesday',\n        'hours': 9.5,\n        'approved': false,\n        'punches': [['work', '9:00 AM', '2:30 PM'], ['meal', '2:30 PM', '3:00 PM'], ['work', '3:00 PM', '5:30 PM']]\n      }, {\n        'date': [10, 24, 2019],\n        'day': 'Thursday',\n        'hours': 0,\n        'approved': false,\n        'punches': []\n      }, {\n        'date': [10, 25, 2019],\n        'day': 'Friday',\n        'hours': 0,\n        'approved': false,\n        'punches': []\n      }, {\n        'date': [10, 26, 2019],\n        'day': 'Saturday',\n        'hours': 0,\n        'approved': false,\n        'punches': []\n      }, {\n        'date': [10, 27, 2019],\n        'day': 'Sunday',\n        'hours': 0,\n        'approved': false,\n        'punches': []\n      }]\n    };\n  }\n\n  static updateEntry(entry) {\n    /* \n    ajax.post({\n        'url': `${apiUrl}/update-entry`,\n        'body': {\n            'token': token,\n            'entry': entry\n        }\n    }) \n    */\n    console.log(\"updated entry from ppc\");\n    console.log(\"Date: \".concat(entry.date));\n    console.log(\"Punches: \".concat(entry.punches));\n    console.log(\"Approved: \".concat(entry.approved));\n    return entry;\n  }\n\n  static logout() {\n    PayrollPalClient.deleteAuthToken();\n    Cookies.remove('demo');\n  }\n\n  static approveAll() {\n    /* ajax.post({\n        'url': `${apiUrl}/approve-all`,\n        'body': {\n            'token': token,\n            'start': start,\n            'end': end\n        }\n    }) */\n    console.log('All hours have been approved');\n  }\n\n  static getAuthToken() {\n    return Cookies.get('authToken');\n  }\n\n  static getIsAuthenticated() {\n    if (Cookies.get('authToken')) {\n      return true;\n    } else {\n      return false;\n    }\n    /* let isAuthenticated = ajax.post({\n        'url': `${apiUrl}/authenticate`\n        'body': {\n            'token': token\n        }\n    }) */\n\n  }\n\n  static setAuthToken(token) {\n    Cookies.set('authToken', token);\n  }\n\n  static deleteAuthToken() {\n    Cookies.remove('authToken');\n  }\n\n}\n\nexport default PayrollPalClient;","map":{"version":3,"sources":["/Users/jacksonfoster/Code/projects/payroll-pal/front-end/payroll-pal/src/payroll-pal-client.js"],"names":["Cookies","apiUrl","PayrollPalClient","login","args","username","password","body","demo","ajax","post","fetch","credentials","method","then","res","json","result","console","log","error","set","setAuthToken","getEntries","start","end","updateEntry","entry","date","punches","approved","logout","deleteAuthToken","remove","approveAll","getAuthToken","get","getIsAuthenticated","token"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\n\nconst apiUrl = 'localhost:5000'\n// const apiUrl = 'payrollpal.thefoundationworks.com/api\nclass PayrollPalClient  {\n    static login(...args){\n        let username = args[0].username\n        let password = args[0].password\n        let body = {'username': username, 'password': password}\n        let demo = args[0].demo\n        if(demo) {\n            ajax.post({\n            'url': `${apiUrl}/demo`,\n            'body': {\n                'demo': demo,\n            }\n        })\n        }\n        else {\n            fetch(`${apiUrl}/auth`, {\n                credentials: 'include', \n                method: 'POST',\n                body: body\n            }).then(res => res.json()) \n            .then(\n                (result) => {\n                    console.log(result)\n                },\n                (error) => {\n                    console.log(error)\n                }\n            )\n        }\n        console.log(username)\n        console.log(password)\n        console.log(demo)\n        if(demo){\n            Cookies.set('demo', demo)\n        }\n        PayrollPalClient.setAuthToken(\"AUTH-TOKEN-XXXXX123456XX\");\n        // if authenticated\n        return true\n        // else\n        // return false\n    }\n    static getEntries(start, end){            \n        /* \n        let token = Cookies.get('authToken')\n        ajax.post({\n            'url': `${apiUrl}/get-entries`,\n            'body': {\n                'token': token,\n                'start': start,\n                'end': end\n            }\n        }) */\n        return {\n            'totalHours': 25.5,\n            'payRate': 18.00,\n            'payPeriodStart': [10,21,2019],\n            'payPeriodEnd': [10,27,2019],\n            'firstName': 'Jackson',\n            'entries': [\n                {\n                    'date': [10,21,2019],\n                    'day': 'Monday',\n                    'hours': 8,\n                    'approved': true,\n                    'punches': [\n                        ['work', '9:00 AM', '2:30 PM'],\n                        ['meal', '2:30 PM', '3:00 PM'],\n                        ['meal', '3:00 PM', '5:30 PM'],\n                    ]\n                },\n                {\n                    'date': [10,22,2019],\n                    'day': 'Tuesday',\n                    'hours': 8,\n                    'approved': false,\n                    'punches': [\n                        ['work', '9:00 AM', '2:30 PM'],\n                        ['meal', '2:30 PM', '3:00 PM'],\n                        ['meal', '3:00 PM', '5:30 PM'],\n                    ]\n                },\n                {\n                    'date': [10,23,2019],\n                    'day': 'Wednesday',\n                    'hours': 9.5,\n                    'approved': false,\n                    'punches': [\n                        ['work', '9:00 AM', '2:30 PM'],\n                        ['meal', '2:30 PM', '3:00 PM'],\n                        ['work', '3:00 PM', '5:30 PM'],\n                    ]\n                },\n                {\n                    'date': [10,24,2019],\n                    'day': 'Thursday',\n                    'hours': 0,\n                    'approved': false,\n                    'punches': []\n                },\n                {\n                    'date': [10,25,2019],\n                    'day': 'Friday',\n                    'hours': 0,\n                    'approved': false,\n                    'punches': []\n                },\n                {\n                    'date': [10,26,2019],\n                    'day': 'Saturday',\n                    'hours': 0,\n                    'approved': false,\n                    'punches': []\n                },\n                {\n                    'date': [10,27,2019],\n                    'day': 'Sunday',\n                    'hours': 0,\n                    'approved': false,\n                    'punches': []\n                },\n        ]} \n    }\n    static updateEntry(entry) {\n        /* \n        ajax.post({\n            'url': `${apiUrl}/update-entry`,\n            'body': {\n                'token': token,\n                'entry': entry\n            }\n        }) \n        */\n        console.log(`updated entry from ppc`)\n        console.log(`Date: ${entry.date}`)\n        console.log(`Punches: ${entry.punches}`)\n        console.log(`Approved: ${entry.approved}`)\n        return entry\n    }\n    static logout(){\n        PayrollPalClient.deleteAuthToken();\n        Cookies.remove('demo')\n    }\n    static approveAll(){\n        /* ajax.post({\n            'url': `${apiUrl}/approve-all`,\n            'body': {\n                'token': token,\n                'start': start,\n                'end': end\n            }\n        }) */\n        console.log('All hours have been approved')\n    }\n    static getAuthToken(){\n        return Cookies.get('authToken')\n    }\n\n    static getIsAuthenticated(){\n        if(Cookies.get('authToken')){\n            return true\n        }\n        else {\n            return false\n        }\n        /* let isAuthenticated = ajax.post({\n            'url': `${apiUrl}/authenticate`\n            'body': {\n                'token': token\n            }\n        }) */\n    }\n\n    static setAuthToken(token){\n        Cookies.set('authToken', token)\n    }\n\n    static deleteAuthToken(){\n        Cookies.remove('authToken')\n    }\n\n}\n\nexport default PayrollPalClient;"]},"metadata":{},"sourceType":"module"}