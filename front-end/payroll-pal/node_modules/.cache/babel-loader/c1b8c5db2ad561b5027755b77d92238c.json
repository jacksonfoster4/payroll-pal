{"ast":null,"code":"import Cookies from 'js-cookie';\nconst apiUrl = 'http://localhost:5000'; // const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nclass PayrollPalClient {\n  static async sendRequest(path, method, body) {\n    return await fetch(\"\".concat(apiUrl).concat(path), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json'\n      }),\n      method: method ? method : 'POST',\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(result => {\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static async sendAuthedRequest(path, method, body) {\n    return await fetch(\"\".concat(apiUrl).concat(path), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json',\n        \"Authorization\": 'JWT ' + PayrollPalClient.getAuthToken()\n      }),\n      method: method ? method : 'POST',\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(result => {\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static login(...args) {\n    let username = args[0].username;\n    let password = args[0].password;\n    let body = {\n      'username': username,\n      'password': password\n    };\n    let demo = args[0].demo;\n    return PayrollPalClient.sendRequest('/auth', 'POST', body).then(result => {\n      let token = result['access_token'];\n      PayrollPalClient.setAuthToken(token);\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static getEntries(start, end) {\n    if (!start) {\n      let d = new Date('October 21, 2019');\n      start = [d.getMonth() + 1, d.getDate(), d.getFullYear()];\n    }\n\n    if (!end) {\n      let d = new Date('October 27, 2019');\n      end = [d.getMonth() + 1, d.getDate(), d.getFullYear()];\n    }\n\n    let body = {\n      'start': start,\n      'end': end\n    };\n    return PayrollPalClient.sendAuthedRequest('/get-entries', 'POST', body);\n  }\n\n  static updateEntry(entry) {\n    let body = {\n      'entry': entry\n    };\n    return PayrollPalClient.sendAuthedRequest('/update-entry', 'POST', body);\n  }\n\n  static approveAll(start, end) {\n    console.log(start, end);\n    let body = {\n      'start': start,\n      'end': end\n    };\n    return PayrollPalClient.sendAuthedRequest('/approve-all', 'POST', body);\n  }\n\n  static logout() {\n    PayrollPalClient.deleteAuthToken();\n    Cookies.remove('demo');\n  }\n\n  static getAuthToken() {\n    return Cookies.get('authToken');\n  }\n\n  static async getIsAuthenticated() {\n    return await PayrollPalClient.sendAuthedRequest('/verify', 'GET').then(result => {\n      return result.error ? false : true;\n    });\n  }\n\n  static setAuthToken(token) {\n    Cookies.set('authToken', token);\n  }\n\n  static deleteAuthToken() {\n    Cookies.remove('authToken');\n  }\n\n}\n\nconst Heartbeat = () => {\n  return PayrollPalClient.sendAuthedRequest('/hearbeat', 'GET').then(result => {\n    if (result.error) {\n      throw Error(\"Whoops! Something went wrong. Your token most likely expired or was invalid.\");\n    }\n  });\n};\n\nexport default PayrollPalClient;\nexport { Heartbeat };","map":{"version":3,"sources":["/Users/jacksonfoster/Code/projects/payroll-pal/front-end/payroll-pal/src/payroll-pal-client.js"],"names":["Cookies","apiUrl","PayrollPalClient","sendRequest","path","method","body","fetch","headers","Headers","JSON","stringify","then","res","json","result","error","sendAuthedRequest","getAuthToken","login","args","username","password","demo","token","setAuthToken","getEntries","start","end","d","Date","getMonth","getDate","getFullYear","updateEntry","entry","approveAll","console","log","logout","deleteAuthToken","remove","get","getIsAuthenticated","set","Heartbeat","Error"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\n\nconst apiUrl = 'http://localhost:5000'\n// const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nclass PayrollPalClient  {\n\n    static async sendRequest(path, method, body){\n        return await fetch(`${apiUrl}${path}`, {\n\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n            }),\n            method: method ? method : 'POST',\n            body: JSON.stringify(body),\n\n        })\n        .then(res => res.json())\n        .then(\n            (result) => {\n                return result\n            },\n            (error) => {\n                return error\n            }\n        )\n    }\n\n    static async sendAuthedRequest(path, method, body){\n        return await fetch(`${apiUrl}${path}`, {\n\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n                \"Authorization\": 'JWT ' + PayrollPalClient.getAuthToken()\n            }),\n            method: method ? method : 'POST',\n            body: JSON.stringify(body),\n\n        })\n        .then( res => res.json() )\n        .then(\n            (result) => {\n                return result\n            },\n            (error) => {\n                return error\n            }\n        )\n    }\n    \n    static login(...args) { \n        let username = args[0].username\n        let password = args[0].password\n        let body = {'username': username, 'password': password}\n        let demo = args[0].demo\n\n        return PayrollPalClient.sendRequest('/auth', 'POST', body).then(\n            (result) => {\n                let token = result['access_token']\n                PayrollPalClient.setAuthToken(token)\n                return result\n            },\n            (error) => {\n                return error\n            }\n        )\n    }\n\n    static getEntries(start, end){\n        if(!start) {\n            let d = new Date('October 21, 2019')\n            start = [d.getMonth()+1, d.getDate(), d.getFullYear()]\n        }\n\n        if(!end) {\n            let d = new Date('October 27, 2019')\n            end = [d.getMonth()+1, d.getDate(), d.getFullYear()]\n        }\n        \n        let body = {'start': start, 'end': end}\n\n        return PayrollPalClient.sendAuthedRequest('/get-entries', 'POST', body)\n    }\n\n    static updateEntry(entry) {\n        let body = {'entry': entry}\n        return PayrollPalClient.sendAuthedRequest('/update-entry', 'POST', body)\n    }\n\n    static approveAll(start, end){\n        console.log(start, end)\n        let body = {'start': start, 'end': end}\n        return PayrollPalClient.sendAuthedRequest('/approve-all', 'POST', body)\n    }\n\n    static logout(){\n        PayrollPalClient.deleteAuthToken();\n        Cookies.remove('demo')\n    }\n\n    static getAuthToken(){\n        return Cookies.get('authToken')\n    }\n\n    static async getIsAuthenticated(){\n        return await PayrollPalClient.sendAuthedRequest('/verify', 'GET').then(\n            (result) => {\n                return result.error ? false : true\n            }\n        )\n    }\n\n    static setAuthToken(token){\n        Cookies.set('authToken', token)\n    }\n\n    static deleteAuthToken(){\n        Cookies.remove('authToken')\n    }\n\n}\n\nconst Heartbeat = () => {\n    return PayrollPalClient.sendAuthedRequest('/hearbeat', 'GET').then(\n        (result) => {\n            if(result.error){\n                throw Error(\"Whoops! Something went wrong. Your token most likely expired or was invalid.\")\n            }\n        }\n    )\n}\n\nexport default PayrollPalClient;\nexport { Heartbeat }"]},"metadata":{},"sourceType":"module"}