{"ast":null,"code":"import Cookies from 'js-cookie';\nconst apiUrl = 'http://localhost:5000'; // const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nclass PayrollPalClient {\n  static async sendRequest(path, method, body) {\n    return await fetch(\"\".concat(apiUrl).concat(path), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json'\n      }),\n      method: method ? method : 'POST',\n      body: JSON.stringify(body)\n    }).then(res => res.json()).then(result => {\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static async sendAuthedRequest(path, method, body) {\n    return await fetch(\"\".concat(apiUrl).concat(path), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json',\n        \"Authorization\": 'JWT ' + PayrollPalClient.getAuthToken()\n      }),\n      method: method ? method : 'POST',\n      body: JSON.stringify(body)\n    }).then(res => {\n      if (!res.ok) {\n        throw new Error('test');\n      } else {\n        return res.json();\n      }\n\n      return res;\n    }).then(result => {\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static login(...args) {\n    let username = args[0].username;\n    let password = args[0].password;\n    let body = {\n      'username': username,\n      'password': password\n    };\n    let demo = args[0].demo;\n    return PayrollPalClient.sendRequest('/auth', 'POST', body).then(result => {\n      let token = result['access_token'];\n      PayrollPalClient.setAuthToken(token);\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static getEntries(start, end) {\n    let body = {\n      'start': start,\n      'end': end\n    };\n    return PayrollPalClient.sendAuthedRequest('/get-entries', 'POST', body);\n  }\n\n  static updateEntry(entry) {\n    let body = {\n      'entry': entry\n    };\n    return PayrollPalClient.sendAuthedRequest('/update-entry', 'POST', body);\n  }\n\n  static approveAll(start, end) {\n    let body = {\n      'start': start,\n      'end': end\n    };\n    return PayrollPalClient.sendAuthedRequest('/approve-all', 'POST', body);\n  }\n\n  static logout() {\n    PayrollPalClient.sendAuthedRequest('/logout', 'POST');\n    PayrollPalClient.deleteAuthToken();\n    Cookies.remove('demo');\n  }\n\n  static getAuthToken() {\n    return Cookies.get('authToken');\n  }\n\n  static async getIsAuthenticated() {\n    return await PayrollPalClient.sendAuthedRequest('/verify', 'GET').then(result => {\n      return true;\n    }, error => {\n      return false;\n    });\n  }\n\n  static setAuthToken(token) {\n    Cookies.set('authToken', token);\n  }\n\n  static deleteAuthToken() {\n    Cookies.remove('authToken');\n  }\n\n}\n\nconst Heartbeat = () => {\n  let id = setInterval(function () {\n    PayrollPalClient.sendAuthedRequest('/hearbeat', 'GET').then(result => {\n      if (result.error) {\n        clearInterval(id);\n      }\n    });\n  }, 1000);\n};\n\nexport default PayrollPalClient;\nexport { Heartbeat };","map":{"version":3,"sources":["/Users/jacksonfoster/Code/projects/payroll-pal/front-end/payroll-pal/src/payroll-pal-client.js"],"names":["Cookies","apiUrl","PayrollPalClient","sendRequest","path","method","body","fetch","headers","Headers","JSON","stringify","then","res","json","result","error","sendAuthedRequest","getAuthToken","ok","Error","login","args","username","password","demo","token","setAuthToken","getEntries","start","end","updateEntry","entry","approveAll","logout","deleteAuthToken","remove","get","getIsAuthenticated","set","Heartbeat","id","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\n\nconst apiUrl = 'http://localhost:5000'\n// const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nclass PayrollPalClient  {\n\n    static async sendRequest(path, method, body){\n        return await fetch(`${apiUrl}${path}`, {\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n            }),\n            method: method ? method : 'POST',\n            body: JSON.stringify(body),\n        }).then(res => res.json())\n          .then(\n            (result) => {\n                return result\n            },\n            (error) => {\n                return error\n            }\n          )\n    }\n\n    static async sendAuthedRequest(path, method, body){\n        return await fetch(`${apiUrl}${path}`, {\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n                \"Authorization\": 'JWT ' + PayrollPalClient.getAuthToken(),\n            }),\n            method: method ? method : 'POST',\n            body: JSON.stringify(body),\n        }).then(res => {\n            if (!res.ok) {\n                throw new Error('test');\n            }\n            else {\n                return res.json()\n            }\n            return res\n        })\n          .then(\n            (result) => {\n                return result\n            },\n            (error) => {\n                return error\n            }\n          )\n    }\n    \n    static login(...args) { \n        let username = args[0].username\n        let password = args[0].password\n        let body = {'username': username, 'password': password}\n        let demo = args[0].demo\n\n        return PayrollPalClient.sendRequest('/auth', 'POST', body).then(\n            (result) => {\n                let token = result['access_token']\n                PayrollPalClient.setAuthToken(token)\n                return result\n            },\n            (error) => {\n                return error\n            }\n        )\n    }\n\n    static getEntries(start, end){\n        let body = {'start': start, 'end': end}\n        return PayrollPalClient.sendAuthedRequest('/get-entries', 'POST', body)\n    }\n\n    static updateEntry(entry) {\n        let body = {'entry': entry}\n        return PayrollPalClient.sendAuthedRequest('/update-entry', 'POST', body)\n    }\n\n    static approveAll(start, end){\n        let body = {'start': start, 'end': end}\n        return PayrollPalClient.sendAuthedRequest('/approve-all', 'POST', body)\n    }\n\n    static logout(){\n        PayrollPalClient.sendAuthedRequest('/logout', 'POST')\n        PayrollPalClient.deleteAuthToken();\n        Cookies.remove('demo')\n    }\n\n    static getAuthToken(){\n        return Cookies.get('authToken')\n    }\n\n    static async getIsAuthenticated(){\n        return await PayrollPalClient.sendAuthedRequest('/verify', 'GET').then(\n            (result) => {\n                return true\n            },\n            (error) => {\n                return false\n            }\n        )\n    }\n\n    static setAuthToken(token){\n        Cookies.set('authToken', token)\n    }\n\n    static deleteAuthToken(){\n        Cookies.remove('authToken')\n    }\n\n}\n\nconst Heartbeat = () => {\n    let id = setInterval(function () {\n        PayrollPalClient.sendAuthedRequest('/hearbeat', 'GET').then(\n            (result) => {\n                if(result.error){\n                    clearInterval(id);\n                }\n            }\n        )\n    }, 1000)\n}\n\nexport default PayrollPalClient;\nexport { Heartbeat }"]},"metadata":{},"sourceType":"module"}