{"ast":null,"code":"import Cookies from 'js-cookie';\nconst apiUrl = 'http://localhost:5000'; // const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nconst JWT = () => {\n  return \"JWT \" + PayrollPalClient.getAuthToken();\n};\n\nclass PayrollPalClient {\n  static async sendAuthedRequest(path, method, body) {\n    return await fetch(\"\".concat(apiUrl).concat(path), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json',\n        \"Authorization\": JWT()\n      }),\n      method: method ? method : 'POST',\n      body: body\n    }).then(res => res.json()).then(result => {\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static async sendRequest(path, method, body) {\n    return await fetch(\"\".concat(apiUrl).concat(path), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json'\n      }),\n      method: method ? method : 'POST',\n      body: body\n    }).then(res => res.json()).then(result => {\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static login(...args) {\n    let username = args[0].username;\n    let password = args[0].password;\n    let body = JSON.stringify({\n      'username': username,\n      'password': password\n    });\n    let demo = args[0].demo;\n    return PayrollPalClient.sendRequest('/auth', 'POST', body).then(result => {\n      let token = result['access_token'];\n      PayrollPalClient.setAuthToken(token);\n      return result;\n    }, error => {\n      return error;\n    });\n  }\n\n  static async getEntries(start, end) {\n    return await fetch(\"\".concat(apiUrl, \"/get-entries\"), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json',\n        \"Authorization\": JWT()\n      }),\n      method: 'POST'\n    }).then(res => res.json()).then(error => {\n      return error;\n    }, result => {\n      return result;\n    });\n  }\n\n  static updateEntry(entry) {\n    /* \n    ajax.post({\n        'url': `${apiUrl}/update-entry`,\n        'body': {\n            'token': token,\n            'entry': entry\n        }\n    }) \n    */\n    console.log(\"updated entry from ppc\");\n    console.log(\"Date: \".concat(entry.date));\n    console.log(\"Punches: \".concat(entry.punches));\n    console.log(\"Approved: \".concat(entry.approved));\n    return entry;\n  }\n\n  static logout() {\n    PayrollPalClient.deleteAuthToken();\n    Cookies.remove('demo');\n  }\n\n  static approveAll() {\n    /* ajax.post({\n        'url': `${apiUrl}/approve-all`,\n        'body': {\n            'token': token,\n            'start': start,\n            'end': end\n        }\n    }) */\n    console.log('All hours have been approved');\n  }\n\n  static getAuthToken() {\n    return Cookies.get('authToken');\n  }\n\n  static getIsAuthenticated() {\n    if (Cookies.get('authToken')) {\n      return true;\n    } else {\n      console.log('no token');\n      return false;\n    }\n    /* let isAuthenticated = ajax.post({\n        'url': `${apiUrl}/authenticate`\n        'body': {\n            'token': token\n        }\n    }) */\n\n  }\n\n  static setAuthToken(token) {\n    Cookies.set('authToken', token);\n  }\n\n  static deleteAuthToken() {\n    Cookies.remove('authToken');\n  }\n\n}\n\nexport default PayrollPalClient;","map":{"version":3,"sources":["/Users/jacksonfoster/Code/projects/payroll-pal/front-end/payroll-pal/src/payroll-pal-client.js"],"names":["Cookies","apiUrl","JWT","PayrollPalClient","getAuthToken","sendAuthedRequest","path","method","body","fetch","headers","Headers","then","res","json","result","error","sendRequest","login","args","username","password","JSON","stringify","demo","token","setAuthToken","getEntries","start","end","updateEntry","entry","console","log","date","punches","approved","logout","deleteAuthToken","remove","approveAll","get","getIsAuthenticated","set"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\n\nconst apiUrl = 'http://localhost:5000'\n// const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nconst JWT = () => {\n    return \"JWT \" + PayrollPalClient.getAuthToken()\n} \n\nclass PayrollPalClient  {\n    static async sendAuthedRequest(path, method, body){\n        return await fetch(`${apiUrl}${path}`, {\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n                \"Authorization\": JWT(),\n            }),\n            method: method ? method : 'POST',\n            body: body,\n        }).then(res => res.json())\n          .then(\n            (result) => {\n                return result\n            },\n            (error) => {\n                return error\n            }\n          )\n    }\n    static async sendRequest(path, method, body){\n        return await fetch(`${apiUrl}${path}`, {\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n            }),\n            method: method ? method : 'POST',\n            body: body,\n        }).then(res => res.json())\n          .then(\n            (result) => {\n                return result\n            },\n            (error) => {\n                return error\n            }\n          )\n    }\n    static login(...args) { \n        let username = args[0].username\n        let password = args[0].password\n        let body = JSON.stringify({'username': username, 'password': password})\n        let demo = args[0].demo\n        return PayrollPalClient.sendRequest('/auth', 'POST', body).then(\n            (result) => {\n                let token = result['access_token']\n                PayrollPalClient.setAuthToken(token)\n                return result\n            },\n            (error) => {\n                return error\n            }\n        )\n    }\n    static async getEntries(start, end){\n        return await fetch(`${apiUrl}/get-entries`, {\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n                \"Authorization\": JWT(),\n            }),\n            method: 'POST',\n        })\n        .then(\n            (res) => res.json() ) \n        .then(\n            (error) => {\n                return error\n            },\n            (result) => {\n                return result\n            }\n            \n        )\n    }\n    static updateEntry(entry) {\n        /* \n        ajax.post({\n            'url': `${apiUrl}/update-entry`,\n            'body': {\n                'token': token,\n                'entry': entry\n            }\n        }) \n        */\n        console.log(`updated entry from ppc`)\n        console.log(`Date: ${entry.date}`)\n        console.log(`Punches: ${entry.punches}`)\n        console.log(`Approved: ${entry.approved}`)\n        return entry\n    }\n    static logout(){\n        PayrollPalClient.deleteAuthToken();\n        Cookies.remove('demo')\n    }\n    static approveAll(){\n        /* ajax.post({\n            'url': `${apiUrl}/approve-all`,\n            'body': {\n                'token': token,\n                'start': start,\n                'end': end\n            }\n        }) */\n        console.log('All hours have been approved')\n    }\n    static getAuthToken(){\n        return Cookies.get('authToken')\n    }\n\n    static getIsAuthenticated(){\n        if(Cookies.get('authToken')){\n            return true\n        }\n        else {\n            console.log('no token')\n            return false\n        }\n        /* let isAuthenticated = ajax.post({\n            'url': `${apiUrl}/authenticate`\n            'body': {\n                'token': token\n            }\n        }) */\n    }\n\n    static setAuthToken(token){\n        Cookies.set('authToken', token)\n    }\n\n    static deleteAuthToken(){\n        Cookies.remove('authToken')\n    }\n\n}\n\nexport default PayrollPalClient;"]},"metadata":{},"sourceType":"module"}