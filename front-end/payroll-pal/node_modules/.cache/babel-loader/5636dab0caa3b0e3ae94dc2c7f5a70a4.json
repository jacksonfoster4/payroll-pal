{"ast":null,"code":"import Cookies from 'js-cookie';\nconst apiUrl = 'http://localhost:5000'; // const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nconst JWT = () => {\n  return \"JWT \" + PayrollPalClient.getAuthToken();\n};\n\nclass PayrollPalClient {\n  static login(...args) {\n    let username = args[0].username;\n    let password = args[0].password;\n    let body = JSON.stringify({\n      'username': username,\n      'password': password\n    });\n    let demo = args[0].demo;\n    return fetch(\"\".concat(apiUrl, \"/auth\"), {\n      headers: {\n        \"Content-Type\": 'application/json'\n      },\n      method: 'POST',\n      body: body\n    }).then(res => res.json()).then(result => {\n      let token = result['access_token'];\n      PayrollPalClient.setAuthToken(token);\n      console.log('cookie has been set');\n      return result;\n    }, error => {\n      console.log(error);\n      return error;\n    });\n  }\n\n  static async getEntries(start, end) {\n    return await fetch(\"\".concat(apiUrl, \"/get-entries\"), {\n      headers: new Headers({\n        \"Content-Type\": 'application/json',\n        \"Authorization\": JWT()\n      }),\n      method: 'POST'\n    }).then(res => res.json()).then(result => {\n      return result;\n    }).catch(error => {\n      alert(error.request);\n    });\n  }\n\n  static updateEntry(entry) {\n    /* \n    ajax.post({\n        'url': `${apiUrl}/update-entry`,\n        'body': {\n            'token': token,\n            'entry': entry\n        }\n    }) \n    */\n    console.log(\"updated entry from ppc\");\n    console.log(\"Date: \".concat(entry.date));\n    console.log(\"Punches: \".concat(entry.punches));\n    console.log(\"Approved: \".concat(entry.approved));\n    return entry;\n  }\n\n  static logout() {\n    PayrollPalClient.deleteAuthToken();\n    Cookies.remove('demo');\n  }\n\n  static approveAll() {\n    /* ajax.post({\n        'url': `${apiUrl}/approve-all`,\n        'body': {\n            'token': token,\n            'start': start,\n            'end': end\n        }\n    }) */\n    console.log('All hours have been approved');\n  }\n\n  static getAuthToken() {\n    return Cookies.get('authToken');\n  }\n\n  static getIsAuthenticated() {\n    if (Cookies.get('authToken')) {\n      return true;\n    } else {\n      console.log('no token');\n      return false;\n    }\n    /* let isAuthenticated = ajax.post({\n        'url': `${apiUrl}/authenticate`\n        'body': {\n            'token': token\n        }\n    }) */\n\n  }\n\n  static setAuthToken(token) {\n    Cookies.set('authToken', token);\n  }\n\n  static deleteAuthToken() {\n    Cookies.remove('authToken');\n  }\n\n}\n\nexport default PayrollPalClient;","map":{"version":3,"sources":["/Users/jacksonfoster/Code/projects/payroll-pal/front-end/payroll-pal/src/payroll-pal-client.js"],"names":["Cookies","apiUrl","JWT","PayrollPalClient","getAuthToken","login","args","username","password","body","JSON","stringify","demo","fetch","headers","method","then","res","json","result","token","setAuthToken","console","log","error","getEntries","start","end","Headers","catch","alert","request","updateEntry","entry","date","punches","approved","logout","deleteAuthToken","remove","approveAll","get","getIsAuthenticated","set"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AAEA,MAAMC,MAAM,GAAG,uBAAf,C,CACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;AACd,SAAO,SAASC,gBAAgB,CAACC,YAAjB,EAAhB;AACH,CAFD;;AAIA,MAAMD,gBAAN,CAAwB;AACpB,SAAOE,KAAP,CAAa,GAAGC,IAAhB,EAAsB;AAClB,QAAIC,QAAQ,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQC,QAAvB;AACA,QAAIC,QAAQ,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQE,QAAvB;AACA,QAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAC,kBAAYJ,QAAb;AAAuB,kBAAYC;AAAnC,KAAf,CAAX;AACA,QAAII,IAAI,GAAGN,IAAI,CAAC,CAAD,CAAJ,CAAQM,IAAnB;AAEA,WAAOC,KAAK,WAAIZ,MAAJ,YAAmB;AAC3Ba,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OADkB;AAE3BC,MAAAA,MAAM,EAAE,MAFmB;AAG3BN,MAAAA,IAAI,EAAEA;AAHqB,KAAnB,CAAL,CAKNO,IALM,CAKDC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALN,EAMNF,IANM,CAOFG,MAAD,IAAY;AACR,UAAIC,KAAK,GAAGD,MAAM,CAAC,cAAD,CAAlB;AACAhB,MAAAA,gBAAgB,CAACkB,YAAjB,CAA8BD,KAA9B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,aAAOJ,MAAP;AACH,KAZE,EAcFK,KAAD,IAAW;AACPF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACA,aAAOA,KAAP;AACH,KAjBE,CAAP;AAoBH;;AACD,eAAaC,UAAb,CAAwBC,KAAxB,EAA+BC,GAA/B,EAAmC;AAC/B,WAAO,MAAMd,KAAK,WAAIZ,MAAJ,mBAA0B;AACxCa,MAAAA,OAAO,EAAE,IAAIc,OAAJ,CAAY;AACjB,wBAAgB,kBADC;AAEjB,yBAAiB1B,GAAG;AAFH,OAAZ,CAD+B;AAKxCa,MAAAA,MAAM,EAAE;AALgC,KAA1B,CAAL,CAOZC,IAPY,CAOPC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAPA,EAQZF,IARY,CASRG,MAAD,IAAY;AACR,aAAOA,MAAP;AACH,KAXQ,EAYXU,KAZW,CAYJL,KAAD,IAAW;AACfM,MAAAA,KAAK,CAACN,KAAK,CAACO,OAAP,CAAL;AACH,KAdY,CAAb;AAeH;;AACD,SAAOC,WAAP,CAAmBC,KAAnB,EAA0B;AACtB;;;;;;;;;AASAX,IAAAA,OAAO,CAACC,GAAR;AACAD,IAAAA,OAAO,CAACC,GAAR,iBAAqBU,KAAK,CAACC,IAA3B;AACAZ,IAAAA,OAAO,CAACC,GAAR,oBAAwBU,KAAK,CAACE,OAA9B;AACAb,IAAAA,OAAO,CAACC,GAAR,qBAAyBU,KAAK,CAACG,QAA/B;AACA,WAAOH,KAAP;AACH;;AACD,SAAOI,MAAP,GAAe;AACXlC,IAAAA,gBAAgB,CAACmC,eAAjB;AACAtC,IAAAA,OAAO,CAACuC,MAAR,CAAe,MAAf;AACH;;AACD,SAAOC,UAAP,GAAmB;AACf;;;;;;;;AAQAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACH;;AACD,SAAOnB,YAAP,GAAqB;AACjB,WAAOJ,OAAO,CAACyC,GAAR,CAAY,WAAZ,CAAP;AACH;;AAED,SAAOC,kBAAP,GAA2B;AACvB,QAAG1C,OAAO,CAACyC,GAAR,CAAY,WAAZ,CAAH,EAA4B;AACxB,aAAO,IAAP;AACH,KAFD,MAGK;AACDnB,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACA,aAAO,KAAP;AACH;AACD;;;;;;;AAMH;;AAED,SAAOF,YAAP,CAAoBD,KAApB,EAA0B;AACtBpB,IAAAA,OAAO,CAAC2C,GAAR,CAAY,WAAZ,EAAyBvB,KAAzB;AACH;;AAED,SAAOkB,eAAP,GAAwB;AACpBtC,IAAAA,OAAO,CAACuC,MAAR,CAAe,WAAf;AACH;;AAtGmB;;AA0GxB,eAAepC,gBAAf","sourcesContent":["import Cookies from 'js-cookie'\n\nconst apiUrl = 'http://localhost:5000'\n// const apiUrl = 'payrollpal.thefoundationworks.com/api\n\nconst JWT = () => {\n    return \"JWT \" + PayrollPalClient.getAuthToken()\n} \n\nclass PayrollPalClient  {\n    static login(...args) { \n        let username = args[0].username\n        let password = args[0].password\n        let body = JSON.stringify({'username': username, 'password': password})\n        let demo = args[0].demo\n        \n        return fetch(`${apiUrl}/auth`, {\n            headers: { \"Content-Type\": 'application/json'},\n            method: 'POST',\n            body: body,\n        })\n        .then(res => res.json()) \n        .then(\n            (result) => {\n                let token = result['access_token']\n                PayrollPalClient.setAuthToken(token)\n                console.log('cookie has been set')\n                return result\n            },\n\n            (error) => {\n                console.log(error)\n                return error\n            }\n            \n        )\n    }\n    static async getEntries(start, end){\n        return await fetch(`${apiUrl}/get-entries`, {\n            headers: new Headers({\n                \"Content-Type\": 'application/json',\n                \"Authorization\": JWT(),\n            }),\n            method: 'POST',\n        })\n        .then(res => res.json()) \n        .then(\n            (result) => {\n                return result\n            }\n        ).catch((error) => {\n            alert(error.request)\n        })\n    }\n    static updateEntry(entry) {\n        /* \n        ajax.post({\n            'url': `${apiUrl}/update-entry`,\n            'body': {\n                'token': token,\n                'entry': entry\n            }\n        }) \n        */\n        console.log(`updated entry from ppc`)\n        console.log(`Date: ${entry.date}`)\n        console.log(`Punches: ${entry.punches}`)\n        console.log(`Approved: ${entry.approved}`)\n        return entry\n    }\n    static logout(){\n        PayrollPalClient.deleteAuthToken();\n        Cookies.remove('demo')\n    }\n    static approveAll(){\n        /* ajax.post({\n            'url': `${apiUrl}/approve-all`,\n            'body': {\n                'token': token,\n                'start': start,\n                'end': end\n            }\n        }) */\n        console.log('All hours have been approved')\n    }\n    static getAuthToken(){\n        return Cookies.get('authToken')\n    }\n\n    static getIsAuthenticated(){\n        if(Cookies.get('authToken')){\n            return true\n        }\n        else {\n            console.log('no token')\n            return false\n        }\n        /* let isAuthenticated = ajax.post({\n            'url': `${apiUrl}/authenticate`\n            'body': {\n                'token': token\n            }\n        }) */\n    }\n\n    static setAuthToken(token){\n        Cookies.set('authToken', token)\n    }\n\n    static deleteAuthToken(){\n        Cookies.remove('authToken')\n    }\n\n}\n\nexport default PayrollPalClient;"]},"metadata":{},"sourceType":"module"}